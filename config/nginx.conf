worker_processes 1;
daemon off;

events {
  worker_connections 512;
}


http {
  lua_package_path "/Users/garethr/Documents/nginx-json-proxy/lib/?.lua;;";

  access_log /dev/stdout;
  error_log /dev/stdout;
  lua_code_cache off;
      lua_need_request_body on;

  server {
    listen 3000;
    server_name localhost;

    location / {
      content_by_lua '
        local cjson = require "cjson"

        -- make a subrequest, passing the request body
        res = ngx.location.capture(
          "/request",
          { method = ngx.HTTP_POST, body = ngx.var.request_body }
        )

        -- if the subrequest errors
        if res.status == ngx.HTTP_OK then
        else
          ngx.status = ngx.HTTP_BAD_REQUEST
          ngx.say("invalid request")
          -- terminate the request
          return
        end

        -- if we have a valid request, decode response as JSON
        local success, response = pcall(cjson.decode, res.body)

        if success then
          -- if valid JSON just pass through the response
          ngx.status = res.status
          ngx.say(res.body)
        else
          -- if invalid JSON then error
          ngx.log(ngx.ERR, "invalid JSON response " .. res.body)
          ngx.status = ngx.HTTP_BAD_REQUEST
          ngx.say("invalid response")
        end
      ';
    }

    location /request {
      internal;
      content_by_lua '
        local cjson = require "cjson"

        -- decode the request body as JSON and catch any errors
        local success, response = pcall(cjson.decode, ngx.var.request_body)

        if success then
          -- we should proxy to a real backend here
          ngx.say(\'{"version": 10}\')
          -- ngx.say(\'{"version": Invalid}\')
        else
          -- if the request is nott valid JSON
          ngx.log(ngx.ERR, "invalid JSON request: " .. ngx.var.request_body)
          -- return a 400 indicating a client error
          ngx.status = ngx.HTTP_BAD_REQUEST
        end
      ';
    }

  }
}

